{
  "name": "ensure.js",
  "version": "0.4.2",
  "description": "Simple JS type-checking + extras",
  "main": "ensure.js",
  "scripts": {
    "test": "mocha test/ test/**/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/eduard44/ensure.git"
  },
  "keywords": [
    "type-checking"
  ],
  "author": {
    "name": "Eduardo Trujillo",
    "email": "ed@chromabits.com",
    "url": "http://chromabits.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/eduard44/ensure/issues"
  },
  "homepage": "https://github.com/eduard44/ensure",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-concat": "^0.5.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-mocha-istanbul": "^2.0.0",
    "istanbul": "^0.3.0",
    "mocha": "^1.21.4",
    "nodeunit": "^0.9.0",
    "should": "^4.0.4"
  },
  "readme": "![Logo](http://assets.chromabits.com/ensure/logo.png)\n\n# Ensure.js\n\nA simple library for checking types in Javascript + extras\n\n## Usage\n\nEnsure is available as a global variable (or a module on Node):\n\n__ensure(object, type, soft = false)__\n\n- __object:__ Is the object you are checking\n- __type:__ Is the type you are expecting It can be any \"class\" in JavaScript, such as `String`, `Error`, or `Boolean`.\n- __soft:__ If set to true, ensure won't throw an error when the type does not match\n\nFor most objects, Ensure will do a simple `instanceof` check. However, some built-in objects (String, Number, Boolean)\nare trickier to check so the library will do some custom checking functions for these.\n\nTo check if a variable is a string:\n\n```js\nvar hello = 'Hello World';\n\nensure(hello, String, true);\n>> true\n\nvar notString = 1337;\n\nensure(notString, String, true);\n>> false\n```\n\nThe previous example is using the \"soft mode\", which means that ensure won't throw an Error\nwhen a type does not match, instead it will return a boolean value.\n\nOn the default mode:\n\n```js\nvar hello = 'Hello World';\n\nensure(hello, String);\n>> undefined\n\nensure(90210, String);\n>> TypeException: Invalid type: Expected String\n```\n\n## On the browser\n\n1.- Install using [Bower](http://bower.io):\n\n```\nbower install ensure.js\n```\n\n2.- Include the JS file on your project:\n\n```html\n<script src=\"bower_components/ensure.js/ensure.js\"></script>\n```\n3.- Use it!\n\n```js\nconsole.log(ensure('It works!', String));\n```\n\n## On Node.js\n\n1.- Install using npm:\n\n```\nnpm install ensure.js\n```\n\n2.- Include the library in your project:\n\n```js\nvar ensure = require('ensure.js');\n```\n\n3.- Use it!\n\n```js\nconsole.log(ensure('It works!', String));\n```\n\n## Supported types:\n\n+ String\n+ Number\n+ Boolean\n+ Array\n+ (Any object)\n\n## Record Types\n\nLanguages like C++, Hack and Haskell have nice syntax for data types that hold\ninformation. You might know them as Structs or Records. Ensure.js provides an\nemulation of this format. I say emulation because it is not analyzed\nstatically and might have some behavior differences. However, it can be useful\nfor adding some validation to certain objects in your application. Instead of\nblindly assuming that a certain variable of an object is of a certain type\nyou can use Ensure Records which automatically perform these checks for you.\n\nPlease note that if performance is important, it is always faster to just use\nregular objects.\n\n__EnsureRecord(spec)__\n\n*spec*:\nThe spec is an object specifying the types of each variable in the record, where\nthe key is the name of the property and the value the type to expect.\n\n__EnsureRecordType(values)__\n\n*values*:\nThe values being applied to the instance being instantiated. Will throw an error if\nthe types do not match the spec\n\n### Example:\n\n```js\nvar ensure = require('ensure'),\n    EnsureRecord = ensure.EnsureRecord;\n\n// First, we create our person type\nvar Person = new EnsureRecord({\n        firstName: String,\n        lastName: String,\n        age: Number\n    });\n\n// Then we create an instance by providing its values\nvar bob = new Person({\n        firstName: \"Bob\",\n        lastName: \"Lulz\",\n        age: 20\n    });\n\nconsole.log(bob.firstName)\n>>> \"Bob\"\n\n// Note that if we try to brake the spec, we get an error\nvar alex = new Person({\n        firstName: \"Bob\",\n        lastName: \"Lulz\",\n        age: \"Old\"\n    });\n>>> [TypeException]\n\n// Same with setters:\nbob.name = [1, 5, 7];\n>>> [TypeException]\n```\n\n## Other Extras:\n\n__require(object)__\nThrow an error if `object` is undefined, null or an empty string:\n```js\nvar hello;\n\nensure.require(hello);\n>> [Error]\n\nhello = '';\n\nensure.require(hello);\n>> [Error]\n\nhello = 'Hello World';\n\nensure.require(hello); // This shouldn't do anything (which is good)\n>> undefined\n```\n\n__requireIsNewThis(constructor, context)__\nThrow an error if a constructor is called without `new`\n\nUseful for preventing development mistakes\n\n```js\nvar myObject = function () {\n    ensure.requireIsNewThis(myObject, this);\n};\n\nvar instance = new newObject(); // This should just create the instance normally\n>> undefined\n\nvar instance = newObject(); // An error is thrown, new is missing\n>> [Error]\n```\n\n__isIn(object, array)__\nCheck if object is in an array:\n```js\nensure.isIn(object, array);\n```\n\n__isInRange(object, min, max)__\nCheck if a number is within a range:\n```js\nensure.isInRange(object, min, max);\n```\n\nExample:\n\n```js\nvar hello = 'Hello';\n\nensure.isInRange(hello.length, 0, 3);\n>> false\n\nensure.isInRange(hello.length, 0, 6);\n>> true\n```\n\n__isPositiveNumber(object)__\nCheck if a number is positive:\n```js\nensure.isPositiveNumber(object);\n```\n\nand a few more, just take a look at the source\n\n## Development\n\nTo hack on Ensure.js, you need Node.js 0.10+. To setup a dev environment, run the following:\n\n1.- Install grunt:\n`npm install -g grunt`\n\n2.- Clone repo:\n`git clone git@github.com:eduard44/ensure.git`\n\n3.- cd to repo:\n`cd ensure`\n\n4.- Install dependencies for development:\n`npm install` (in the project root)\n\n5.- Start grunt in watch mode:\n`grunt`. This will continuously rebuild ensure.js on every change in `/src`\n\n6.- You can run tests with:\n`npm test`\n\n7.- You can check code coverage with:\n`grunt coverage`",
  "readmeFilename": "README.md",
  "gitHead": "2d7cdf47b47e22b2f3888db2fcb74cf4cb5b08d2",
  "_id": "ensure.js@0.4.2",
  "_shasum": "d8ceccfa0187e7f2f331f23832749a7bee36eb84",
  "_from": "ensure.js@"
}
